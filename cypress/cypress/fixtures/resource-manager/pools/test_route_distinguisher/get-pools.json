{
  "data": {
    "QueryRootResourcePools": [
      {
        "id": "21474836481",
        "Name": "test",
        "PoolType": "allocating",
        "Tags": [{ "id": "30064771072", "Tag": "test", "__typename": "Tag" }],
        "PoolProperties": { "address": "192.168.10.1", "prefix": 24, "subnet": false },
        "AllocationStrategy": { "id": "2", "Name": "ipv4", "Lang": "go", "__typename": "AllocationStrategy" },
        "ResourceType": { "id": "25769803777", "Name": "ipv4", "__typename": "ResourceType" },
        "Resources": [{ "id": "17179869189", "NestedPool": null, "__typename": "Resource" }],
        "Capacity": { "freeCapacity": "255", "utilizedCapacity": "1", "__typename": "PoolCapacityPayload" },
        "__typename": "ResourcePool"
      },
      {
        "id": "21474836570",
        "Name": "test_route_distinguisher",
        "PoolType": "allocating",
        "Tags": [{ "id": "30064771127", "Tag": "test_route_distinguisher", "__typename": "Tag" }],
        "PoolProperties": { "rd": "" },
        "AllocationStrategy": {
          "id": "12",
          "Name": "route_distinguisher",
          "Lang": "js",
          "Script": "\n'use strict';\n\n// framework managed constants\n//;\n//;\n// framework managed constants\n\n// STRATEGY_START\n\n/*\nRD allocation strategy - this strategy expects all inputs to be provided and just validates and formats them\n\n- Expects route_distuingusher resource type to have 1 properties of type string [\"rd:string\"]\n- Input params\n-  userInput.ipv4 - valid ipv4 addr\n-  userInput.as - valid AS number (2bytes or 4 bytes)\n-  userInput.assignedNumber\n- Valid input combinations are: ipv4 + assignedNumber(2 bytes), as(4 byte) + assignedNumber(2 bytes), as(2 byte) + assignedNumber(4 bytes)\n- Allocates previously freed RDs\n */\n\n\nconst BYTE_2_MAX = 65536;\nconst BYTE_4_MAX = 4294967296;\nconst BYTE_6_MAX = BigInt(256) ** BigInt(6);\n\nfunction rangeCapacity() {\n    // this is theoretical max capacity for 6 bytes\n    return BYTE_6_MAX\n}\n\nfunction freeCapacity(utilisedCapacity) {\n    return rangeCapacity() - utilisedCapacity\n}\n\nfunction utilizedCapacity(allocatedRanges, newlyAllocatedVlan) {\n    // FIXME using BigInts but allocatedRanges only fits 2^32 items MAX\n    return BigInt(allocatedRanges.length) + BigInt(newlyAllocatedVlan != null)\n}\n\nfunction logStats(newlyAllocatedRd, allocatedRds = [], level = \"log\") {\n    let utilisedCapacity = utilizedCapacity(allocatedRds, newlyAllocatedRd);\n    let remainingCapacity = freeCapacity( utilisedCapacity);\n    let utilPercentage;\n    if (remainingCapacity === BigInt(0)) {\n        utilPercentage = 100.0;\n    } else {\n        let utilFloat = Number(utilisedCapacity * BigInt(1000) / rangeCapacity()) / 1000;\n        utilPercentage = (utilFloat * 100);\n    }\n    \n    console[level](\"Remaining capacity: \" + remainingCapacity);\n    console[level](\"Utilised capacity: \" + utilisedCapacity);\n    console[level](`Utilisation: ${utilPercentage.toFixed(1)}%`);\n}\n\nfunction invoke() {\n    let currentResourcesUnwrapped = currentResources.map(cR =\u003e cR.Properties);\n    let currentResourcesSet = new Set(currentResourcesUnwrapped.map(ip =\u003e ip.rd));\n\n    let is2ByteAssignedNumber = false;\n    let assignedNumber = -1;\n    if (userInput.hasOwnProperty(\"assignedNumber\") \u0026\u0026 userInput.assignedNumber) {\n        assignedNumber = userInput.assignedNumber;\n        if (assignedNumber \u003e 0 \u0026\u0026 assignedNumber \u003c BYTE_2_MAX) {\n            is2ByteAssignedNumber = true;\n        } else if (assignedNumber \u003e 0 \u0026\u0026 assignedNumber \u003c BYTE_4_MAX) {\n            is2ByteAssignedNumber = false;\n        } else {\n            console.error(\"Unable to allocate RD for assigned number: \" + userInput.assignedNumber + \". Number is invalid\");\n            logStats(null, currentResourcesUnwrapped, \"error\");\n            return null\n        }\n    }\n\n    let is2ByteAs = false;\n    let asNumber = -1;\n    if (userInput.hasOwnProperty(\"asNumber\") \u0026\u0026 userInput.asNumber) {\n        asNumber = userInput.asNumber;\n        if (asNumber \u003e 0 \u0026\u0026 asNumber \u003c BYTE_2_MAX) {\n            is2ByteAs = true;\n        } else if (asNumber \u003e 0 \u0026\u0026 asNumber \u003c BYTE_4_MAX) {\n            is2ByteAs = false;\n        } else {\n            console.error(\"Unable to allocate RD for AS number: \" + userInput.asNumber + \". AS is invalid\");\n            logStats(null, currentResourcesUnwrapped, \"error\");\n            return null\n        }\n    }\n\n    let ipv4 = \"-1\";\n    if (userInput.hasOwnProperty(\"ipv4\") \u0026\u0026 userInput.ipv4) {\n\n        var re = /^([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/;\n        var res = re.exec(userInput.ipv4);\n\n        if (res === null) {\n            console.error(\"Unable to allocate RD, invalid IPv4: \" + userInput.ipv4 + \" provided\");\n            logStats(null, currentResourcesUnwrapped, \"error\");\n            return null\n        }\n\n        if (userInput.ipv4 \u003e \"255.255.255.255\") {\n            console.error(\"Unable to allocate RD, invalid IPv4: \" + userInput.ipv4 + \" provided\");\n            logStats(null, currentResourcesUnwrapped, \"error\");\n            return null\n        }\n\n        ipv4 = userInput.ipv4;\n    }\n\n    if (ipv4 !== \"-1\" \u0026\u0026 asNumber !== -1) {\n        console.error(\"Unable to allocate RD, both AS: \" + asNumber + \" number and IPv4: \" + ipv4 + \" provided\");\n        logStats(null, currentResourcesUnwrapped, \"error\");\n        return null\n    }\n\n    if (asNumber !== -1 \u0026\u0026 !is2ByteAs \u0026\u0026 assignedNumber !== -1 \u0026\u0026 !is2ByteAssignedNumber) {\n        console.error(\"Unable to allocate RD, 4 byte AS: \" + asNumber + \" and 4 byte assigned number: \" + assignedNumber + \" provided\");\n        logStats(null, currentResourcesUnwrapped, \"error\");\n        return null\n    }\n\n    if (ipv4 !== \"-1\" \u0026\u0026 assignedNumber !== -1 \u0026\u0026 !is2ByteAssignedNumber) {\n        console.error(\"Unable to allocate RD, 4 byte assigned number: \" + assignedNumber + \" provided with an IP address\");\n        logStats(null, currentResourcesUnwrapped, \"error\");\n        return null\n    }\n\n    // TYPE 0\n    if (asNumber !== -1 \u0026\u0026 is2ByteAs \u0026\u0026 assignedNumber !== -1) {\n        let newRd = `${asNumber}:${assignedNumber}`;\n        if (currentResourcesSet.has(newRd)) {\n            console.error(\"Unable to allocate RD, duplicate RD created: \" + newRd);\n            logStats(null, currentResourcesUnwrapped, \"error\");\n            return null\n        }\n        // logStats(newRd, currentResourcesUnwrapped)\n        return {\"rd\": newRd}\n    }\n\n    // TYPE 1\n    if (ipv4 !== \"-1\" \u0026\u0026 assignedNumber !== -1 \u0026\u0026 is2ByteAssignedNumber) {\n        let newRd = `${ipv4}:${assignedNumber}`;\n        if (currentResourcesSet.has(newRd)) {\n            console.error(\"Unable to allocate RD, duplicate RD created: \" + newRd);\n            logStats(null, currentResourcesUnwrapped, \"error\");\n            return null\n        }\n        // logStats(newRd, currentResourcesUnwrapped)\n        return {\"rd\": newRd}\n    }\n\n    // TYPE 2\n    if (asNumber !== -1 \u0026\u0026 !is2ByteAs \u0026\u0026 assignedNumber !== -1 \u0026\u0026 is2ByteAssignedNumber) {\n        let newRd = `${asNumber}:${assignedNumber}`;\n        if (currentResourcesSet.has(newRd)) {\n            console.error(\"Unable to allocate RD, duplicate RD created: \" + newRd);\n            logStats(null, currentResourcesUnwrapped, \"error\");\n            return null\n        }\n        // logStats(newRd, currentResourcesUnwrapped)\n        return {\"rd\": newRd}\n    }\n\n    // didn't match known RD types\n    console.error(\"Unable to allocate RD, check the input parameters. User provided input: \" + JSON.stringify(userInput));\n    logStats(null, currentResourcesUnwrapped, \"error\");\n    return null\n}\n\nfunction capacity() {\n    return { freeCapacity: String(rangeCapacity()), utilizedCapacity: String(currentResources.length)};\n}\n\n\n",
          "__typename": "AllocationStrategy"
        },
        "ResourceType": { "id": "25769803807", "Name": "route_distinguisher", "__typename": "ResourceType" },
        "Resources": [],
        "Capacity": { "freeCapacity": "281474976710656", "utilizedCapacity": "0", "__typename": "PoolCapacityPayload" },
        "__typename": "ResourcePool"
      }
    ]
  }
}
