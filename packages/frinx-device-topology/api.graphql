### This file was generated by Nexus Schema
### Do not make changes to this file directly

input AddBlueprintInput {
  name: String!
  template: String!
}

type AddBlueprintPayload {
  blueprint: Blueprint!
}

input AddDeviceInput {
  address: String
  blueprintId: String
  deviceSize: DeviceSize
  deviceType: String
  labelIds: [String!]
  model: String
  mountParameters: String
  name: String!
  password: String
  port: Int
  serviceState: DeviceServiceState
  username: String
  vendor: String
  version: String
  zoneId: String!
}

type AddDevicePayload {
  device: Device!
}

input AddLocationInput {
  countryId: String!
  name: String!
}

type AddLocationPayload {
  location: Location!
}

input AddSnapshotInput {
  deviceId: String!
  name: String!
}

type AddSnapshotPayload {
  snapshot: Snapshot
}

input AddZoneInput {
  name: String!
}

type AddZonePayload {
  zone: Zone!
}

input ApplySnapshotInput {
  deviceId: String!
  name: String!
}

type ApplySnapshotPayload {
  isOk: Boolean!
  output: String!
}

type Blueprint implements Node {
  createdAt: String!
  id: ID!
  name: String!
  template: String!
  updatedAt: String!
}

type BlueprintConnection {
  edges: [BlueprintEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BlueprintEdge {
  cursor: String!
  node: Blueprint!
}

type CSVImport {
  isOk: Boolean
}

input CSVImportInput {
  file: Upload!
  zoneId: String!
}

type CalculatedDiffPayload {
  result: CalculatedDiffResult!
}

type CalculatedDiffResult {
  createdData: [DiffData!]!
  deletedData: [DiffData!]!
  updatedData: [CalculatedUpdateDiffData!]!
}

type CalculatedUpdateDiffData {
  actualData: String!
  intendedData: String!
  path: String!
}

type CloseTransactionPayload {
  isOk: Boolean!
}

input CommitConfigInput {
  deviceId: String!
  shouldDryRun: Boolean
}

type CommitConfigOutput {
  configuration: String
  deviceId: String!
  message: String
}

type CommitConfigPayload {
  output: CommitConfigOutput!
}

type Country implements Node {
  code: String!
  id: ID!
  name: String!
}

type CountryConnection {
  edges: [CountryEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type CountryEdge {
  cursor: String!
  node: Country!
}

input CreateLabelInput {
  name: String!
}

type CreateLabelPayload {
  label: Label
}

type CreateTransactionPayload {
  transactionId: String
}

type DataStore {
  config: String!
  operational: String!
  snapshots: [Snapshot!]!
}

type DeleteBlueprintPayload {
  blueprint: Blueprint
}

type DeleteDevicePayload {
  device: Device
}

type DeleteLabelPayload {
  label: Label
}

input DeleteSnapshotInput {
  deviceId: String!
  name: String!
  transactionId: String!
}

type DeleteSnapshotPayload {
  snapshot: Snapshot
}

type Device implements Node {
  address: String
  blueprint: Blueprint
  createdAt: String!
  deviceSize: DeviceSize!
  id: ID!
  isInstalled: Boolean!
  labels(after: String, before: String, first: Int, last: Int): LabelConnection!
  location: Location
  model: String
  mountParameters: String
  name: String!
  position: Position
  serviceState: DeviceServiceState!
  source: DeviceSource!
  updatedAt: String!
  vendor: String
  zone: Zone!
}

type DeviceConnection {
  edges: [DeviceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type DeviceEdge {
  cursor: String!
  node: Device!
}

input DeviceOrderByInput {
  direction: SortDirection!
  sortKey: SortDeviceBy!
}

enum DeviceServiceState {
  IN_SERVICE
  OUT_OF_SERVICE
  PLANNING
}

enum DeviceSize {
  LARGE
  MEDIUM
  SMALL
}

enum DeviceSource {
  DISCOVERED
  IMPORTED
  MANUAL
}

type DiffData {
  data: String!
  path: String!
}

type EdgeSourceTarget {
  interface: String!
  nodeId: String!
}

input FilterDevicesInput {
  deviceName: String
  labels: [String!]
}

input FilterTopologyInput {
  labels: [String!]
}

type GraphEdge {
  id: ID!
  source: EdgeSourceTarget!
  target: EdgeSourceTarget!
}

enum GraphEdgeStatus {
  ok
  unknown
}

type GraphNode {
  device: Device!
  id: ID!
  interfaces: [GraphNodeInterface!]!
}

type GraphNodeInterface {
  id: String!
  status: GraphEdgeStatus!
}

type GraphVersionEdge {
  id: ID!
  source: EdgeSourceTarget!
  target: EdgeSourceTarget!
}

type GraphVersionNode {
  id: ID!
  interfaces: [String!]!
  name: String!
}

type InstallDevicePayload {
  device: Device!
}

type Label implements Node {
  createdAt: String!
  id: ID!
  name: String!
  updatedAt: String!
}

type LabelConnection {
  edges: [LabelEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type LabelEdge {
  cursor: String!
  node: Label!
}

type Location implements Node {
  country: String!
  createdAt: String!
  id: ID!
  name: String!
  updatedAt: String!
}

type LocationConnection {
  edges: [LocationEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type LocationEdge {
  cursor: String!
  node: Location!
}

type Mutation {
  addBlueprint(input: AddBlueprintInput!): AddBlueprintPayload!
  addDevice(input: AddDeviceInput!): AddDevicePayload!
  addLocation(input: AddLocationInput!): AddLocationPayload!
  addSnapshot(input: AddSnapshotInput!, transactionId: String!): AddSnapshotPayload
  addZone(input: AddZoneInput!): AddZonePayload!
  applySnapshot(input: ApplySnapshotInput!, transactionId: String!): ApplySnapshotPayload!
  closeTransaction(deviceId: String!, transactionId: String!): CloseTransactionPayload!
  commitConfig(input: CommitConfigInput!, transactionId: String!): CommitConfigPayload!
  createLabel(input: CreateLabelInput!): CreateLabelPayload!
  createTransaction(deviceId: String!): CreateTransactionPayload!
  deleteBlueprint(id: String!): DeleteBlueprintPayload!
  deleteDevice(id: String!): DeleteDevicePayload!
  deleteLabel(id: String!): DeleteLabelPayload!
  deleteSnapshot(input: DeleteSnapshotInput!): DeleteSnapshotPayload
  importCSV(input: CSVImportInput!): CSVImport
  installDevice(id: String!): InstallDevicePayload!
  resetConfig(deviceId: String!, transactionId: String!): ResetConfigPayload!
  revertChanges(transactionId: String!): RevertChangesPayload!
  syncFromNetwork(deviceId: String!, transactionId: String!): SyncFromNetworkPayload!
  uninstallDevice(id: String!): UninstallDevicePayload!
  updateBlueprint(id: String!, input: UpdateBlueprintInput!): UpdateBlueprintPayload!
  updateDataStore(deviceId: String!, input: UpdateDataStoreInput!, transactionId: String!): UpdateDataStorePayload!
  updateDevice(id: String!, input: UpdateDeviceInput!): UpdateDevicePayload!
  updateDeviceMetadata(input: [PositionInput!]!): UpdateDeviceMetadataPayload!
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Position {
  x: Float!
  y: Float!
}

input PositionInput {
  deviceId: ID!
  position: PositionInputField!
}

input PositionInputField {
  x: Float!
  y: Float!
}

type Query {
  blueprints(after: String, before: String, first: Int, last: Int): BlueprintConnection!
  calculatedDiff(deviceId: String!, transactionId: String!): CalculatedDiffPayload!
  countries(after: String, before: String, first: Int, last: Int): CountryConnection!
  dataStore(deviceId: String!, transactionId: String!): DataStore
  devices(
    after: String
    before: String
    filter: FilterDevicesInput
    first: Int
    last: Int
    orderBy: DeviceOrderByInput
  ): DeviceConnection!
  labels(after: String, before: String, first: Int, last: Int): LabelConnection!
  locations(after: String, before: String, first: Int, last: Int): LocationConnection!
  node(id: ID!): Node
  topology(filter: FilterTopologyInput): Topology
  topologyCommonNodes(nodes: [String!]!): TopologyCommonNodes
  topologyVersionData(version: String!): TopologyVersionData!
  topologyVersions: [String!]
  transactions: [Transaction!]!
  uniconfigShellSession: String
  zones(after: String, before: String, first: Int, last: Int): ZonesConnection!
}

type ResetConfigPayload {
  dataStore: DataStore!
}

type RevertChangesPayload {
  isOk: Boolean!
}

type Snapshot {
  createdAt: String!
  name: String!
}

enum SortDeviceBy {
  CREATED_AT
  NAME
}

enum SortDirection {
  ASC
  DESC
}

type Subscription {
  uniconfigShell(input: String, sessionId: String!, trigger: Int): String
}

type SyncFromNetworkPayload {
  dataStore: DataStore
}

type Topology {
  edges: [GraphEdge!]!
  nodes: [GraphNode!]!
}

type TopologyCommonNodes {
  commonNodes: [String!]!
}

type TopologyVersionData {
  edges: [GraphVersionEdge!]!
  nodes: [GraphVersionNode!]!
}

type Transaction {
  changes: [TransactionChange!]!
  lastCommitTime: String!
  transactionId: String!
}

type TransactionChange {
  device: Device!
  diff: [TransactionDiff!]!
}

type TransactionDiff {
  dataAfter: String
  dataBefore: String
  path: String!
}

type UninstallDevicePayload {
  device: Device!
}

input UpdateBlueprintInput {
  name: String
  template: String
}

type UpdateBlueprintPayload {
  blueprint: Blueprint!
}

input UpdateDataStoreInput {
  config: String!
}

type UpdateDataStorePayload {
  dataStore: DataStore!
}

input UpdateDeviceInput {
  address: String
  blueprintId: String
  deviceSize: DeviceSize
  deviceType: String
  labelIds: [String!]
  locationId: String
  model: String
  mountParameters: String
  password: String
  port: Int
  serviceState: DeviceServiceState
  username: String
  vendor: String
  version: String
}

type UpdateDeviceMetadataPayload {
  devices: [Device]
}

type UpdateDevicePayload {
  device: Device
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

type Zone implements Node {
  createdAt: String!
  id: ID!
  name: String!
  updatedAt: String!
}

type ZoneEdge {
  cursor: String!
  node: Zone!
}

type ZonesConnection {
  edges: [ZoneEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}
